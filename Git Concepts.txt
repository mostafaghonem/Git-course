Git : is a version control system
==============================
git archi has 3 trees:
3- repo
2- staging area
1- working directory
===================
concepts:
Repository (Repo): مستودع
place that holds Project .

Branch : فرع
فرع من البرودجيكت الرئيسى

local Repo : local project that you work on

Remote Repo : 

commit : (snapshot or checkpoint in your local repo): التعديل الل انت عملته على ال local repo 

clone : from local or remote Repo :  استنساخ 

push : upload local changes to remote Repo 

pull : pull changes from remote Repo to local 

pull Request : (tell other about your changes to pull it from local to remote)

=====================================================
important notes : 
- create Repo for every project .
- create a new branch for every feature or enhancement .
- No need to conect to remote repo when working .
=====================================================
Readme.md file : 
doc for md syntax : https://guides.github.com/features/mastering-markdown/
ده ملف بيتكتب فيه الخطوات المهمة الل المفروض تعملها او اى حاجة تخص البروجيت 
md : standard for mark down .

Heading :
# the largest heading
## the second largest heading
##### the smallest largest heading
=====================================================
1 - Working Directory: ده الفولدر الل عجهازى شغال عليه
    git add file-name : to add file to staging area
	git reset head file-name : to remove file from staging area
2 - Staging Area : دى المنطقة الل بحط فيها الملف عشان اقدر اعمله Commit 
    git commit -m "message" : to save changes of local repo as i can push it to remote repo
3 - Local Repo : 
    git push remoteRepo branchName : to save changes to remote repo
4 - Remote Repo :
=====================================================
Commands : 
==========
git clone -link of Repo-
git status : status
git add (File-Name) : add files to staging area
git add * : add all files
git reset head (File-Name) or git restore --stage file-name : remove file from staging area  
git commit -m "type here the Commit message ex: the bug U fix or adding new feature"
git branch : display branchs names that i works on (on local repo)
git remote -v : display reomte branch that i works on
git push (RemoteRepo) (BranchName) : push special branch to remote branch
git pull RemoteRepo : get changes from remoteRepo to local Repo and merge it with old files (git pull : git fetch(get changes) + git merge)
git config -l : list configuration what you will need.
git config --global --edit : open editor to edit the configuartion 
touch file-name : to create new file .
=================
to change user.name or user.mail from cinfig
git config --global user.name "mostafaghonem90@yahoo"
git config --global user.mail "mostafaghonem90@yahoo"
=================
to add SSH to Github
-> ssh-keygen -t rsa -b 4096 -C "mostafaghonem90@yahoo.com"
the file location will be in users/mostafa ghonem/.ssh/id_rsa
then -> cat id_rsa
then copy the key and add it in Github 

to test the key :
-> ssh -T git@github.com 
=================
to set up the remote repository:
git remote add origin https://github.com/VijayNew/NewExample.git
=================
-u : make git pull changes then push your code
git push -u origin master
=================
to create alias for instructions:
git config --global alias.Alias-Name instruction-name
ex: git config --global alias.st status
so, git status === git st
=================
to craete new branch:
git branch branch-name
=================
to switch to a specific branch :
git checkout branch-name
=================
to craete new branch and switch to it :
git checkout -b branch-name
=================
to rename the current branch
git branch -m new-name
=================
to delete a specific branch :
git branch -d branch-name

git branch -D branch-name : enforce deleting
=================
to merge the new branch to (main or master) branch 
swith to master branch then,
git merge new-branch-name

then : if you need to delete the new branch
git branch -d branch-name
=================
to save files into stash
first add files to staging area
git stash

to add file to stash with a message
git stash save "message"

to list files in stash
git stash list

to pop file fom stash (if does not specify the file , it will pop last added file)
git stash pop

to delete from stash (if does not specify the file , it will drop last added file)
git stash drop

to show the file in stash (if does not specify the file , it will show last added file)
git stash show 

to pop specific file from stash
git stash pop stash@{id-of-file}

to delete specific file from stash
git stash drop stash@{id-of-file}

to show specific file from stash
git stash show stash@{id-of-file}

to pop from stash without deleting the file from stash , and it will pop the last added file
git stash apply

to clear all files in stash
git stash clear
=================
to open file with VS code
code file-name

to open folder in VS code 
code .
=================
to delete modified files before adding it to stage area
git clean -n : to review files will be deleted
git clean -f : to delete all files that modified
=================
Head : is a pointer point to the last commit in your Repo.

git log : Display Commits that have done on project .
git log -n number of last commit you want to display ex: git log -n 5

to search for a word or any thing in the commits 
git log --grep="regix"

to delete a commit make the head point to the commit before this commit 
git reset --hard hash-of the commit that you want the head point to it
=================
to ignore files from push it to the centralized server (Github)
create file .gitignore
and add all files you need on it
ex: *.log will ignore all files .log

to add file in .gitignore
write file or folder name on it 

to force add file to staging area to push it as this file in .gitignore
git add -f file-name
=================
tag: to mark part of code at a period of time this used to mark versions of prgrams

to list current tags 
git tag

to create light weight tag after push to remote-repo , this tag takes the message of the last commit
git tag tag-name ex: git tag v1.0

to create anotated tag 
git tag -a tag-name -m "Description of the tag"

to push the created tag
git push (remote-Repo) tag-name ex: git push origin v1.0

to delete a tag from local Repo
git tag -d tag-name

to delete tag from remote Repo
git push origin --delete tag-name
=================
to show changes of modified files that currently on working directory
git diff

to show changes of modified files only words that changed that currently on working directory 
git diff --color-words

to show changes of modified files that currently on staging area
git diff --staged

to compare between 2 commits to show changes between them
git diff firstCommitHash..secondCommitHash
and we can use --color-words here: git diff hash1..hash2 --color-words

to show changes on a a specific commit
git show hash-of-the-commit
=================
to remove a file 
git rm file-name
=================
to rename a file: rename equvalent to move (mv)
git mv oldfile-name newfile-name
=================
to move file from working directory to Repo skipping the step of staging area
git commit -am "message"
-a for committing all files directly
and m for writting a message

to open editor to write your message of commiting
git commit -a : after modification of files
=================
to discard changes of a modified file
git checkout -- file-name
=================
to change commit message 
git commit --amend -m "the new message"
=================
access token : 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
-----------------
Author identity unknown

*** Please tell me who you are.

Run

  git config --global user.email "mostafaghonem90@yahoo.com"
  git config --global user.name "mostafaghonem"
-----------------